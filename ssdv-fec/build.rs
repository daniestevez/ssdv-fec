//! ssdv-fec build script.
//!
//! This build script generates the tables for the Galois field arithmetic.
//!
//! The Galois field GF(2⁸) is realized as the quotient
//! GF(2)\[x\] / (x⁸ + x⁴ + x³ + x² + 1).
//! Its arithmetic is implemented using a table of the exponential
//! and a table of the logarithm, which are generated by this crate.
//!
//! An element a₇x⁷ + ⋯ + a₀ in GF(2⁸) is encoded as an element of `u8`, where
//! the leading coefficient a₇ is placed in the most-significant bit and the
//! independent term a₀ is placed in the least-significant bit.

use proc_macro2::TokenStream;
use quote::quote;
use std::{env, fs, path::Path};

// Primitive polynomial p defining GF(2^8) as GF(2)[x] / (p)
// p = x^8 + x^4 + x^3 + x^2 + 1
const GF_POLY: u8 = 0b11101;

#[derive(Clone, Eq, PartialEq, Hash)]
struct Tables {
    exp_table: [u8; 256],
    log_table: [u8; 256],
}

impl Default for Tables {
    fn default() -> Tables {
        Tables {
            exp_table: [0; 256],
            log_table: [0; 256],
        }
    }
}

fn gf256_tables() -> Tables {
    let mut tables = Tables::default();
    let mut a = 1u8;
    for power in 0..255 {
        tables.exp_table[power] = a;
        tables.log_table[usize::from(a)] = u8::try_from(power).unwrap();
        a = if a & 0x80 != 0 {
            (a << 1) ^ GF_POLY
        } else {
            a << 1
        };
    }
    tables
}

fn slice_to_token_stream(slice: &[u8]) -> TokenStream {
    quote! {
        [#(#slice),*]
    }
}

fn write_table(filename: &str, table: &[u8]) {
    let out_dir = env::var_os("OUT_DIR").unwrap();
    let path = Path::new(&out_dir).join(filename);
    fs::write(path, slice_to_token_stream(table).to_string()).unwrap();
}

fn main() {
    let tables = gf256_tables();
    write_table("gf256_exp_table.rs", &tables.exp_table);
    write_table("gf256_log_table.rs", &tables.log_table);

    // The only reason to rerun the build script is if itself has been modified,
    // since no external files are read.
    println!("cargo::rerun-if-changed=build.rs");
}
